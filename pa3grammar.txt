Program -> #startscope Declaration-list #endscope $
Declaration-list -> Declaration Declaration-list
Declaration-list -> ε
Declaration -> Declaration-initial Declaration-prime
Declaration-initial -> Type-specifier #saveinp ID
Declaration-prime -> Fun-declaration-prime
Declaration-prime -> Var-declaration-prime
Var-declaration-prime -> ; #setvar
Var-declaration-prime -> [ #pnum NUM ] ; #setarr
Fun-declaration-prime -> #special_save #start_symbol ( Params ) #label #init_variable #init_variable #startreturn Compound-stmt #endreturn #return_address #add_function_to_symbol_table #special_save_pair
Type-specifier -> int
Type-specifier -> void
Params -> int #saveinp ID #setvar Param-prime Param-list
Params -> void Param-list-void-abtar
Param-list-void-abtar -> ID Param-prime Param-list
Param-list-void-abtar -> ε
Param-list -> , Param #setvar Param-list
Param-list -> ε
Param -> Declaration-initial Param-prime
Param-prime -> [ ]
Param-prime -> ε
Compound-stmt -> { #startscope Declaration-list Statement-list #endscope }
Statement-list -> Statement Statement-list
Statement-list -> ε
Statement -> Expression-stmt
Statement -> Compound-stmt
Statement -> Selection-stmt
Statement -> Iteration-stmt
Statement -> Return-stmt
Statement -> Switch-stmt
Expression-stmt -> Expression ; #pop
Expression-stmt -> break ; #break
Expression-stmt -> ;
Selection-stmt -> if ( Expression ) #save Statement else #jpf_save Statement #jp
Iteration-stmt -> while #label ( Expression ) #startbreak #save Statement #while #endbreak
Return-stmt -> return Return-stmt-prime #return
Return-stmt-prime -> #numeric_label ;
Return-stmt-prime -> Expression ;
Switch-stmt -> switch #startswitch ( Expression ) { #startbreak #startscope Case-stmts Default-stmt #endscope } #endswitch #endbreak
Case-stmts -> Case-stmt Case-stmts
Case-stmts -> ε
Case-stmt -> case #pnum NUM #case : Statement-list
Default-stmt -> default #casedefualt : Statement-list
Default-stmt -> ε
Expression -> Simple-expression-zegond
Expression -> #pid ID B
B -> = Expression #assign
B -> [ Expression ] #index H
B -> Simple-expression-prime
H -> = Expression #assign
H -> G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> #saveinp Relop Additive-expression #opperation
C -> ε
Relop -> <
Relop -> ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> #saveinp Addop Term #opperation D
D -> ε
Addop -> +
Addop -> -
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> * Signed-factor #mult G
G -> ε
Signed-factor -> + Factor
Signed-factor -> - Factor #signed
Signed-factor -> Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> + Factor
Signed-factor-zegond -> - Factor #signed
Signed-factor-zegond -> Factor-zegond
Factor -> ( Expression )
Factor -> #pid ID Var-call-prime
Factor -> #pnum NUM
Var-call-prime -> ( Args #output_in ) #call_function
Var-call-prime -> Var-prime
Var-prime -> [ Expression ] #index
Var-prime -> ε
Factor-prime -> ( Args #output_in ) #call_function
Factor-prime -> ε
Factor-zegond -> ( Expression )
Factor-zegond -> #pnum NUM
Args -> Arg-list
Args -> ε
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime
Arg-list-prime -> ε